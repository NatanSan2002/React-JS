(Codigos no Terminal do projeto)

npx create-react-app nome-projeto ||| Criação Projeto React 

npm start  ||| Abrir aba do site (tem que ser dado dentro da pasta principal do projeto, onde estão todas as pastas e arquivos)


App.js

function App() {return(HTMLcodes)} ||| Tudo dentro desse return do "App.js" é o que vai ser exibido de fato

<div className="App"> conteudo </div> Div principal do HTML do "App.js", tudo que for dele tem que estar dentro dessa div principal






HTML 

-classes closed como: <input>, <img>  tem que ficar assim <input/>

classes no html aqui são atribuidas como: className="nome_classe"

{conteudo JavaScript} ||| Exibição de conteudos Javascript dentro do HTML, como valor de variaveis,Retorno de Funçoes, logica 2+1 etc





CSS

arquivo "index.css" é o arquivo que por padrão é importado pelo "index.js", assim ele é o arquivo de CSS default que sera aplicado em todos os Componentes do projeto.

import Nome_Da_ImportaçãoCSS from "Localização_do_arquivo.css" ||| Importação De estilo CSS para um Componente, que aonde for utilizado ira usar esse estilo importado

<tag className={Nome_Da_ImportaçãoCSS.nomeclass}> </tag> ||| Atribuindo Estilos Da Importação CSS para Elementos Do Componente. (Nesse caso uma Classe)   







JAVACRIPT 

import  Nome_Da_Importação  from  "localização_do_componente.formato" ||| Importação de Componentes para serem usados nesse arquivo 

*A Busca de arquivos no React é feita em Linux, por isso deve se especificar por exemplo se a pasta/arquivo esta na mesma pasta 

em que a busca esta sendo feita, colocando: ./  exemplo: ./pasta_mesmo_local/arquivo.formato  *

<Nome_Da_Importação/> ||| Utilização De Importação no HTML feita no arquivo que a importou.


Para criar um Componente(Um arquivo diferente com codigos próprios)  basta criar um arquivo.formato (exemplo .js)

e dentro dele seus codigos, como em JS, declarar funçoes e exporta-las usando: export default NomeFunção;   no final do codigo do componente

assim, quando outro Componente(arquivo) Importar esse Componente de FunçoesJS, ele tera acesso as Funçoes que foram exportadas 





FUNCTIONS

Para Criar conteudo para HTML dentro de uma função JS usa-se a base JSX, assim, dentro dela basta criar um return( <div>conteudos HTML</div>)

* pode substituir essas <div> </div> pai dentro do return() por:   <> conteudos HTML  </>  ||| Utilizado para não poluir o codigo com muitas Divs em conteudos desnecessarios * 




Props


function nomeF(propriedades) {return (<div> propriedades.valor1   propriedades.valor2 </div>)}  ||| Declarando Funçoes com Propriedades, Sendo Dinamicas com seus valores definidos em cada utilização.

*não esquecer de exporta-la e importala no documento antes*

<nomeF valor1= conteudo1    valor2= conteudo2 />  ||| Utilizando Funçoes com Propriedades, Método de Atribuição de valor para uma propriedade Definida na Function.

* lembrando que se for receber um conteudo de JS dentro de um HTML colocar = {} o conteudo JS


function nomeF( { valor1, valor2, valor3 } ) {return (<div> {valor1} {valor2} {valor3}  </div>)}  ||| Método Simplificado Para Declaração de Propriedades



Validando os Tipos de Props 

import  Nome_Importacao  from "prop-types"   ||| Importando Componente:  prop-types, padrão do React para Validação de Props de uma função. (não precisa especificar a localização direito???)

* Tem que importar no Componente que tem a função que vai ter as props validadas*

*daqui pra frente Nome_Importacao vai ser considerada como:  NPT

nomeFuncao.propTypes = { valor1: NPT.tipo_primitivo , valor2: NPT.tipo_primitivo  }   ||| Objeto para Validação dos tipos das Props da Função

* nomeFuncao.propTypes  esse "p" do prop Types tem que ser minusculo*  * tipo primitivo é  number, string, etc...  * 
  
nomeFuncao.propTypes = { valor1: NPT.tipo_primitivo.isRequired  }  ||| atributo IsRequired pra Prop, indica que é um valor Necessario, não podendo ficar vazio


*Aliais para colocar cadeias de atributos para a mesma prop basta colocar:  NPT.atributo1.atributo2.atributo3   e assim por diante*


NomeFuncao.defaultProps =  { valor1: conteudo, valor2: conteudo}   ||| Valores Dafaults para as Props, Se A Prop Não receber nenhum valor ,então ela ira receber esses ja definidos.



Eventos

function EventoN () {Execuçoes do Evento};  <button onClick= {EventoN} > botão  </button>  ||| Chamando uma Função de Evento em um Onlick


functionN (e) {e.preventDefault( )} ||| Cancela Açoes tipo SUBMIT, permanecendo na pag e continuando codigos da Função 

* "e" do parametro pode ser dado qualquer nome




HOOKs

import {Nome_Hook} from "localização" ||| Importando Hooks para o Componente

* Diferente de importar Componentes, a importação de Hooks não pode ser posta com qualquer nome, tendo que ser seu nome Original de fato*


UseState

import {useState} from "react" ||| Importando Hook useState, serve para mudar valor de uma variavel em tal momento 

const [var, Setvar] = useState() ||| Criando consts para o useState

* poderia colocar dentro do (parametro) do useState ja um valor para ficar como default das consts * 

* esse método de declaração cria duas constantes com o mesmo conteudo ( useState() ), para depois quando uma tiver seu valor 
trocado como a (Setvar) tambem mudar o valor da outra (var), essa outra sendo a responsavel pela utilização desse valor em algum lugar. (Ambas podem ter qualquer nome )*


<input onChange = { (e) => Setvar(e.target.value) }  />          |||    Usando Hook useState 

* nesse exemplo com onChange em um input, toda vez que o campo input sofrer qualquer   
alteração o onChange com useState é disparado, fazendo aquela const "Setvar" de useState pegar o valor e ja atribui a outra var 
"gemea " onde armazena e sera utlizida o valor de fato. * 

*(e) do parametro da Arrow Function pode ser substituido por qualquer nome*       

                                








 





















