Codigos no Terminal (na pasta principal do projeto, onde estão todas as pastas e arquivos)


npx create-react-app nome-projeto       ||| Criação Projeto React  (nome do projeto tem que ser todo em minusculo)

npm install json-server                            ||| Instalar Json Server, para simular o backend da aplicação

npm install uuid                                       ||| Instalar uuid, serve para diferenciar por ID nossos projetos no banco de dados


npm start      ||| Abrir aba do site pelo localhost





App.js

function App() {return(HTMLcodes)} ||| Tudo dentro desse return do "App.js" é o que vai ser exibido de fato

<div className="App"> conteudo </div> Div principal do HTML do "App.js", tudo que for dele tem que estar dentro dessa div principal






HTML 

-classes closed como: <input>, <img>  tem que ficar assim <input/>

classes no html aqui são atribuidas como: className="nome_classe"

{conteudo JavaScript} ||| Exibição de conteudos Javascript dentro do HTML, como valor de variaveis,Retorno de Funçoes, logica 2+1 etc

*o html "puro" é o arquivo index.html na pasta public, ele que tem as configuraçoes de <head> para mudar o title ou importar fontes por HTML por exemplo





CSS

arquivo "index.css" é o arquivo que por padrão é importado pelo "index.js", assim ele é o arquivo de CSS default que sera aplicado em todos os Componentes do projeto.

import Nome_Da_ImportaçãoCSS from "Localização_do_arquivo.css" ||| Importação De estilo CSS para um Componente, que aonde for utilizado ira usar esse estilo importado

<tag className={Nome_Da_ImportaçãoCSS.nomeclass}> </tag> ||| Atribuindo Estilos Da Importação CSS para Elementos Do Componente. (Nesse caso uma Classe)   







JAVACRIPT 

import  Nome_Da_Importação  from  "localização_do_componente.formato" ||| Importação de Componentes para serem usados nesse arquivo 

*A Busca de arquivos no React é feita em Linux, por isso deve se especificar por exemplo se a pasta/arquivo esta na mesma pasta 

em que a busca esta sendo feita, colocando: ./  exemplo: ./pasta_mesmo_local/arquivo.formato  *

<Nome_Da_Importação/> ||| Utilização De Importação no HTML feita no arquivo que a importou.


Para criar um Componente(Um arquivo diferente com codigos próprios)  basta criar um arquivo.formato (exemplo .js)

e dentro dele seus codigos, como em JS, declarar funçoes e exporta-las usando: export default NomeFunção;   no final do codigo do componente

assim, quando outro Componente(arquivo) Importar esse Componente de FunçoesJS, ele tera acesso as Funçoes que foram exportadas 





FUNCTIONS

Para Criar conteudo para HTML dentro de uma função JS usa-se a base JSX, assim, dentro dela basta criar um return( <div>conteudos HTML</div>)

* pode substituir essas <div> </div> pai dentro do return() por:   <> conteudos HTML  </>  ||| Utilizado para não poluir o codigo com muitas Divs em conteudos desnecessarios * 




Props


function nomeF(propriedades) {return (<div> propriedades.valor1   propriedades.valor2 </div>)}  ||| Declarando Funçoes com Propriedades, Sendo Dinamicas com seus valores definidos em cada utilização.

*não esquecer de exporta-la e importala no documento antes*

<nomeF valor1= conteudo1    valor2= conteudo2 />  ||| Utilizando Funçoes com Propriedades, Método de Atribuição de valor para uma propriedade Definida na Function.

* lembrando que se for receber um conteudo de JS dentro de um HTML colocar = {} o conteudo JS


function nomeF( { valor1, valor2, valor3 } ) {return (<div> {valor1} {valor2} {valor3}  </div>)}  ||| Método Simplificado Para Declaração de Propriedades



Validando os Tipos de Props 

import  Nome_Importacao  from "prop-types"   ||| Importando Componente:  prop-types, padrão do React para Validação de Props de uma função. (não precisa especificar a localização direito???)

* Tem que importar no Componente que tem a função que vai ter as props validadas*

*daqui pra frente Nome_Importacao vai ser considerada como:  NPT

nomeFuncao.propTypes = { valor1: NPT.tipo_primitivo , valor2: NPT.tipo_primitivo  }   ||| Objeto para Validação dos tipos das Props da Função

* nomeFuncao.propTypes  esse "p" do prop Types tem que ser minusculo*  * tipo primitivo é  number, string, etc...  * 
  
nomeFuncao.propTypes = { valor1: NPT.tipo_primitivo.isRequired  }  ||| atributo IsRequired pra Prop, indica que é um valor Necessario, não podendo ficar vazio


*Aliais para colocar cadeias de atributos para a mesma prop basta colocar:  NPT.atributo1.atributo2.atributo3   e assim por diante*


NomeFuncao.defaultProps =  { valor1: conteudo, valor2: conteudo}   ||| Valores Dafaults para as Props, Se A Prop Não receber nenhum valor ,então ela ira receber esses ja definidos.



Eventos

function EventoN () {Execuçoes do Evento};  <button onClick= {EventoN} > botão  </button>  ||| Chamando uma Função de Evento em um Onlick


functionN (e) {e.preventDefault( )} ||| Cancela Açoes tipo SUBMIT, permanecendo na pag e continuando codigos da Função 

* "e" do parametro pode ser dado qualquer nome




HOOKs

import {Nome_Hook} from "localização" ||| Importando Hooks para o Componente

* Diferente de importar Componentes, a importação de Hooks não pode ser posta com qualquer nome, tendo que ser seu nome Original de fato*


UseState

import {useState} from "react" ||| Importando Hook useState, serve para mudar valor de uma variavel em tal momento 

const [var, Setvar] = useState() ||| Criando consts para o useState

* poderia colocar dentro do (parametro) do useState ja um valor para ficar como default das consts * 

* esse método de declaração cria duas constantes com o mesmo conteudo ( useState() ), para depois quando uma tiver seu valor 
trocado como a (Setvar) tambem mudar o valor da outra (var), essa outra sendo a responsavel pela utilização desse valor em algum lugar, 
não podendo ser alterada diretamente nela(como uma const mesmo). (Ambas podem ter qualquer nome )*


<input onChange = { (e) => Setvar(e.target.value) }  />          |||    Usando Hook useState 

* nesse exemplo com onChange em um input, toda vez que o campo input sofrer qualquer   
alteração o onChange com useState é disparado, fazendo aquela const "Setvar" de useState pegar o valor e ja atribui a outra var 
"gemea " onde armazena e sera utlizida o valor de fato. * 

*(e) do parametro da Arrow Function pode ser substituido por qualquer nome*    




* State Lift 

Também é possivel criar um componente que apenas pega e envia o valor para a var de UseStage porem que ele não vai ficar limitado a ele
pois sua declaração  const [var,useVar] = useStage()   estará em outro Componente, que utilizará esses valores em muitos outros Lugares.

- Basta cria esse Componente responsavel pela pega e envio do valor para o useStage com uma props para o useStage de outros Componentes,
que ficara onde a useVar do userStage ficaria:  Onchange={PropUseStage} etc...
Então , no Componente das consts declaradas do useStage passe esse Componente de pega e envio dando o useStage em questão para aquela props:

const [var,useVar] = useStage();

<Componente PropUseStage={useVar} />

- Então esse valor dessas consts do useStage ficaram disponiveis para serem usadas em todo esse Componente Principal
e não apenas naquele Componente que pegou e enviou os valores para ela.

*
 



Condicional

var &&  (comandos)  ||| Condicional que verifica se tal Var tem algum valor guardado, se tiver executa os codigos dentro do (parenteses)



var  >  2 ?   ( comandos se verdadeira )  : (comandos se falsa )  ||| Se a Condição para a Var for Verdadeira executa os codigos do  (1parenteses) 
                                                                                                                  Se a condição for falsa então executa os comandos do (2parenteses)
                                
*É obrigatorio ter o (segundo parenteses) de condição falsa*





React Router ||| Ferramenta que serve como Link para outras paginas mesmo, porem só trocando partes especificas da visualização e com isso o URL tambem 


npm install react-router-dom    |||   (No Terminal principal da aplicação) Instalando o pacote

import    { BrowserRouter as Router, Routes, Route, Link }   from 'react-router-dom'    |||  Principais Importaçoes no Componente para o React Router


<Router> Codigos </Router>      ||| Tag Principal do Router, onde ficara todos os seus Componentes especificos

<p> <Link to="/nome_para_url " > Conteudo </Link> </p>  |||  Link com nome de Url que sera usado pela tag Router depois


* Geralmente usasse esses Links em listas mas como são links podem ser aclopados em qualquer tag e conteudo

* tambem podem tranquilamente serem indexado a um Componente próprio, só não esqueça de importar o Componente Link também


<Routes> <Route /> </Routes>  ||| Tag Routes, Onde ficaram as Tags Route dentro

<Route path="/nome_da_url" element={<Nome_Componente/>}  /> ||| Tag Route, é a responsavel por pegar a url definida do Link (ali em cima) e Transferir para a pagina o Componente 


* o nome_da_url tem que ser o mesmo da definida no Link *  

* pagina padrão (inicial) geralmente é definida só com um "/" no path

para evitar conflitor com outros usar o atributo:   exact  path="/"    nesse Link 

* Não esqueça de Importar esse Componente que sera pego antes * 





React Icons      ||| Biblioteca de icones externas para o React



npm install react-icons      ||| Instalando React Icons no projeto   (no Terminal, na pagina principal do projeto)


Import {Nome_do_Icon}  from "react-icons/nome_pasta_icons"     |||   Importando Icons para o Componente


*exemplo: import {FaFacebook, FaInstagram}  from "react-icons/fa" 

*ai onde for utilizar só colocar o Nome,  <FaFacebook/> 



https://react-icons.github.io/react-icons/   ||| Site com maiores informaçoes sobre endereços de Icones



















 





















