
Por favor, desconsidere as prováveis gafes de definição contidas aqui, uso elas apenas para "fast check" sobre cada comando e sua sintaxe, quando quero uma informação mais detalhada e certa, geralmente busco em sites especializados para isso, como o "W3Schools".




Codigos no Terminal (na pasta principal do projeto, onde estão todas as pastas e arquivos)


npx create-react-app nome-projeto       ||| Criação Projeto React  (nome do projeto tem que ser todo em minusculo)

npm install json-server                            ||| Instalar Json Server, para simular o backend da aplicação

npm install uuid                                       ||| Instalar uuid, serve para diferenciar por ID nossos projetos no banco de dados


npm start      ||| Abrir aba do site pelo localhost





App.js

function App() {return(HTMLcodes)} ||| Tudo dentro desse return do "App.js" é o que vai ser exibido de fato

<div className="App"> conteudo </div> Div principal do HTML do "App.js", tudo que for dele tem que estar dentro dessa div principal






HTML 

-classes closed como: <input>, <img>  tem que ficar assim <input/>

classes no html aqui são atribuidas como: className="nome_classe"

{conteudo JavaScript} ||| Exibição de conteudos Javascript dentro do HTML, como valor de variaveis,Retorno de Funçoes, logica 2+1 etc

*o html "puro" é o arquivo index.html na pasta public, ele que tem as configuraçoes de <head> para mudar o title ou importar fontes por HTML por exemplo





CSS

arquivo "index.css" é o arquivo que por padrão é importado pelo "index.js", assim ele é o arquivo de CSS default que sera aplicado em todos os Componentes do projeto.

import Nome_Da_ImportaçãoCSS from "Localização_do_arquivo.module.css" ||| Importação De estilo CSS para um Componente, que aonde for utilizado ira usar esse estilo importado

*o  .module  no nome do arquivo CSS é obrigatorio para funcionar o estilo *

<tag className={Nome_Da_ImportaçãoCSS.nomeclass}> </tag> ||| Atribuindo Estilos Da Importação CSS para Elementos Do Componente. (Nesse caso uma Classe) 


*considere Nome_Importação como styleCSS daqui pra frente


className={ styleCSS[Prop_Classe]  }   ||| Pegando Classes Dinamicamente com Props

*Passariamos o nome da Classe que desejamos nesse caso pra prop do Componente, e ela seria aplicada nesse style normalmente

*não esquecer de definir (Prop) nessa Function é obvio

<Componente Prop_Classe="nome_da_classe" />    ||| Definindo a Prop de Classe para esse Componente


className={ ` ${styleCSS.class}  ${styleCSS[Prop_Classe] }  ` }  ||| Método para Pegar Mais de uma classe em um mesmo Elemento (usa esse `` aspas)

*mesmo método de concatenação "rapido" ja conhecido do JS*













JAVACRIPT 

import  Nome_Da_Importação  from  "localização_do_componente.formato" ||| Importação de Componentes para serem usados nesse arquivo 

*A Busca de arquivos no React é feita em Linux, por isso deve se especificar por exemplo se a pasta/arquivo esta na mesma pasta 

em que a busca esta sendo feita, colocando: ./  exemplo: ./pasta_mesmo_local/arquivo.formato  *

* para voltar de diretorio colocar:  ../  *

<Nome_Da_Importação/> ||| Utilização De Importação no HTML feita no arquivo que a importou (sintaxe resumida da tag).

<Nome_Da_Importação>  Codigos HTML </Nome_Da_Importação>  ||| Utilização De Importaçao, sintaxe de tag obrigatorio quando outras tags html estarão dentro do Componente

* Se esse Componente tiver tags dentro dele, isto é: tags filhas, esse Componente tem que ter uma prop.children no return JSX dele para indicar isso

exemplo: function nomeF (props) { return (  <div>  props.children </div>  )}   ai as tags filhas ficaram onde a props.children foi colocada *


Para criar um Componente(Um arquivo diferente com codigos próprios)  basta criar um arquivo.formato (exemplo .js)

e dentro dele seus codigos, como em JS, declarar funçoes e exporta-las usando: export default NomeFunção;   no final do codigo do componente

assim, quando outro Componente(arquivo) Importar esse Componente de FunçoesJS, ele tera acesso as Funçoes que foram exportadas 





FUNCTIONS

Para Criar conteudo para HTML dentro de uma função JS usa-se a base JSX, assim, dentro dela basta criar um return( <div>conteudos HTML</div>)

* pode substituir essas <div> </div> pai dentro do return() por:   <> conteudos HTML  </>  ||| Utilizado para não poluir o codigo com muitas Divs em conteudos desnecessarios * 




Props


function nomeF(propriedades) {return (<div> propriedades.valor1   propriedades.valor2 </div>)}  ||| Declarando Funçoes com Propriedades, Sendo Dinamicas com seus valores definidos em cada utilização.

<nomeF valor1= conteudo1    valor2= conteudo2 />  ||| Utilizando Funçoes com Propriedades, Método de Atribuição de valor para uma propriedade Definida na Function.

* lembrando que se for receber um conteudo de JS dentro de um HTML colocar = {} o conteudo JS


function nomeF( { valor1, valor2, valor3 } ) {return (<div> {valor1} {valor2} {valor3}  </div>)}  ||| Método Simplificado Para Declaração de Propriedades




Validando os Tipos de Props 

import  Nome_Importacao  from "prop-types"   ||| Importando Componente:  prop-types, padrão do React para Validação de Props de uma função. (não precisa especificar a localização direito???)

* Tem que importar no Componente que tem a função que vai ter as props validadas*

*daqui pra frente Nome_Importacao vai ser considerada como:  NPT

nomeFuncao.propTypes = { valor1: NPT.tipo_primitivo , valor2: NPT.tipo_primitivo  }   ||| Objeto para Validação dos tipos das Props da Função

* nomeFuncao.propTypes  esse "p" do prop Types tem que ser minusculo*  * tipo primitivo é  number, string, etc...  * 
  
nomeFuncao.propTypes = { valor1: NPT.tipo_primitivo.isRequired  }  ||| atributo IsRequired pra Prop, indica que é um valor Necessario, não podendo ficar vazio


*Aliais para colocar cadeias de atributos para a mesma prop basta colocar:  NPT.atributo1.atributo2.atributo3   e assim por diante*


NomeFuncao.defaultProps =  { valor1: conteudo, valor2: conteudo}   ||| Valores Dafaults para as Props, Se A Prop Não receber nenhum valor ,então ela ira receber esses ja definidos.



Eventos

function EventoN () {Execuçoes do Evento};  <button onClick= {EventoN} > botão  </button>  ||| Chamando uma Função de Evento em um Onlick


functionN (e) {e.preventDefault( )} ||| Cancela Açoes tipo SUBMIT, permanecendo na pag e continuando codigos da Função 

* "e" do parametro pode ser dado qualquer nome




HOOKs

import {Nome_Hook} from "localização" ||| Importando Hooks para o Componente

* Diferente de importar Componentes, a importação de Hooks não pode ser posta com qualquer nome, tendo que ser seu nome Original de fato*


UseState

import {useState} from "react" ||| Importando Hook useState, serve para mudar valor de uma variavel em tal momento 

const [var, Setvar] = useState() ||| Criando consts para o useState

* poderia colocar dentro do (parametro) do useState ja um valor para ficar como default das consts * 

* esse método de declaração cria duas constantes com o mesmo conteudo ( useState() ), para depois quando uma tiver seu valor 
trocado como a (Setvar) tambem mudar o valor da outra (var), essa outra sendo a responsavel pela utilização desse valor em algum lugar, 
não podendo ser alterada diretamente nela(como uma const mesmo). (Ambas podem ter qualquer nome )*


<input onChange = { (e) => Setvar(e.target.value) }  />          |||    Usando Hook useState 

* nesse exemplo com onChange em um input, toda vez que o campo input sofrer qualquer   
alteração o onChange com useState é disparado, fazendo aquela const "Setvar" de useState pegar o valor e ja atribui a outra var 
"gemea " onde armazena e sera utlizida o valor de fato. * 

*(e) do parametro da Arrow Function pode ser substituido por qualquer nome*    




* State Lift 

Também é possivel criar um componente que apenas pega e envia o valor para a var de UseStage porem que ele não vai ficar limitado a ele
pois sua declaração  const [var,useVar] = useStage()   estará em outro Componente, que utilizará esses valores em muitos outros Lugares.

- Basta cria esse Componente responsavel pela pega e envio do valor para o useStage com uma props para o useStage de outros Componentes,
que ficara onde a useVar do userStage ficaria:  Onchange={PropUseStage} etc...
Então , no Componente das consts declaradas do useStage passe esse Componente de pega e envio dando o useStage em questão para aquela props:

const [var,useVar] = useStage();

<Componente PropUseStage={useVar} />

- Então esse valor dessas consts do useStage ficaram disponiveis para serem usadas em todo esse Componente Principal
e não apenas naquele Componente que pegou e enviou os valores para ela.

*
 



Condicional

var &&  (comandos)  ||| Condicional que verifica se tal Var é verdadeira:tem algum valor guardado, se tiver executa os codigos dentro do (parenteses)  

* tambem serve para ver se ela é < menor ou > maior que outra coisa, diferenciando do de baixo que tem que ter uma execução para falso



var  >  2 ?   ( comandos se verdadeira )  : (comandos se falsa )  ||| Condição ternaria JS(aceita dentro do JSX), Se a Condição para a Var for Verdadeira executa os codigos do  (1parenteses) 
                                                                                                                  Se a condição for falsa então executa os comandos do (2parenteses)
                                
*É obrigatorio ter o (segundo parenteses) de condição falsa*

*(Parenteses) São na vdd para o JSX exibir Html, se fosse só JS poderia só colocar o comando sem eles?*





React Router ||| Ferramenta que serve como Link para outras paginas mesmo, porem só trocando partes especificas da visualização e com isso o URL tambem 


npm install react-router-dom    |||   (No Terminal principal da aplicação) Instalando o pacote

import    { BrowserRouter as Router, Routes, Route, Link }   from 'react-router-dom'    |||  Principais Importaçoes no Componente para o React Router


<Router> Codigos </Router>      ||| Tag Principal do Router, onde ficara todos os seus Componentes especificos

<Link to="/nome_para_url " > Conteudo </Link>  |||  Link com nome de Url que sera usado pela tag Router depois

*a Url passada poderia ser {`/nome_para_url/${valor_dinamico}`} para encaminhar para um endereço dinamico de acordo com o valor passado de algum conteudo

* Geralmente usasse esses Links em tags listas mas como são links podem ser aclopados em qualquer tag e conteudo

* tambem podem tranquilamente serem indexado a um Componente próprio, só não esqueça de importar o Componente Link também


<Routes>     <Route />   </Routes>  ||| Tag Routes, Onde ficaram as Tags Route dentro

* Geralmente coloca Componentes logo acima na herarquia dessa tag <Routes> não sendo igual ao antigo Switch 

<Route path="/nome_da_url" element={<Nome_Componente/>}  /> ||| Tag Route, é a responsavel por pegar a url definida do Link (ali em cima) e Transferir para a pagina o Componente 

*Se na URL do Link for definido um ${valor_dinamico}, aqui no Route ficará "/nome_da_url/:qlqnome"   para transferir para uma url dinamica*

* o nome_da_url tem que ser o mesmo da definida no Link *  

* pagina padrão (inicial) geralmente é definida só com um "/" no path

para evitar conflitor com outros usar o atributo:   exact  path="/"    nesse Link 

* Não esqueça de Importar esse Componente que sera pego antes *

*Geralmente a tag Router é posta como principal no App.js e dentro dela suas Routes com as pag. componentes gerais (como cabeçalho,footer) não são links Routes mas ficam dentro da Router,
pois aparecem em todos os Componentes linkados mesmo*





React Icons      ||| Biblioteca de icones externas para o React



npm install react-icons      ||| Instalando React Icons no projeto   (no Terminal, na pagina principal do projeto)


Import {Nome_do_Icon}  from "react-icons/nome_pasta_icons"     |||   Importando Icons para o Componente


*exemplo: import {FaFacebook, FaInstagram}  from "react-icons/fa" 

*ai onde for utilizar só colocar o Nome,  <FaFacebook/> 

No CSS, para editar especificamente esses icons, é o svg  exemplo: svg{ configuraçoes de estilo css}

svg {font-size:5px;} ||| Tamanho do Icone





https://react-icons.github.io/react-icons/   ||| Site com maiores informaçoes sobre endereços de Icones



JSON ||| arquivos .json são arquivos de textos que contem informaçoes e dados, que aqui no React serão usados como banco de dados do backend

*Criar arquivo.json na pasta principal do projeto (a mesma que tem as pastar "src", "public" etc)

 geralmente com o nome de db, ficando  db.json *


{conteudo do JSON} ||| essas chaves são as chaves principais de um arquivo.json , tudo que for dele estará dentro delas.

{"nome_conteudo": conteudo, "nome_conteudo2": conteudo2}   ||| dentro das chaves principais os conteudos são criados dessa maneira, podendo os conteudos serem tmb arrays ou objetos


* no arquivo  package.json dentro dos objetos do "scripts", declarar mais um conteudo com o nome de "backend": "json-server --watch db.json --port 5000",

assim habilitará a visualização concreta dos conteudos daquele arquivo db.json, na porta 5000 no caso. 

depois no terminal dar o comando  npm run  backend   e acessar o link do localhost:numero_porta que foi gerado. *


GET ||| pegandos os conteudos do JSON em um componente

fetch("http://localhost:numero_porta/nome_conteudoJSON",      ||| fetch, método que faz um aquisição de um link externo com promessas de acept ou reject
{method: "GET",                                                                                   ||| "GET", pois estamos requirindo um conteudo, não enviando como o POST por exemplo
headers: {"Content-Type":"application/json",},                                 ||| headers, serve para fazer a confirmação do Acept de uma promessa, se o conteudo foi de fato pego e não deu erro
})
.then((resp) => resp.json())                                                                  ||| Then, Então se a requisição foi acept trata a propriedade pega dela e converte com o metodo json() (que simplifica o conteudo pego)
.then((data) => setCategories(data))                                                  ||| outro Then, para agora pegar o anterior, do método json() que simplificou o conteudo. aqui enviando para a var set do useState
.catch((error) => console.log(error) )                                                  ||| Catch, serve para se aquisição for reject (não for pega, der erro) fazer uma ação especifica para isso.


* todos os métodos Then e Catch usaram uma arrow function, alem de que seus parametros dentro dos (parenteses) são obrigatorios para o funcionamento dos Métodos *

* o ponto . antes dos Then e Catch são porque esses Métodos são ligados ao anterior, nesse caso o primeiro Fetch().then.then.catch , mas podem ser postos na linha de baixo (sem ; no meio em)* 


useEffect(() => {codigos a serem executados}, [parametros que podem mudar] )  ||| useEffect, serve para limitar a execução do codigo a apenas uma vez. E se caso queremos por parametros que podem
                                                                                                                                               mudar nessa execução, colocamos dentro do [] que o useEffect verificará se houve uma mudança para atualizar a execução

* um caso de uso do useEffect é o proprio codigo acima de fetch, que se for colocado de forma "pura" fará o react executar a checagem centenas de vezes, então com o useEffect limitamos a apenas uma.*

*os parametros dentro do [] são geralmente valores "variaveis" que queremos por em checagem para ver se teve alteração ou não*






import {useNavigate} from "react-router-dom"; ||| UseNavigate importação

* atribuir a uma var o comando para ser mais pratico*


POST  ||| Postando/enviando informaçoes para o backend JSON


fetch("http://localhost:numero_porta/nome_conteudoJSON",      
{method: "POST",                                                                             ||| POST, pois estamos enviando conteudo para o backend                                                                   
headers: {"Content-Type":"application/json",},                                 
body: JSON.stringify(conteudo)                                                      ||| o conteudo enviado para o corpo(body) do arquivo JSON, antes é convertido pelo stringify() para ficar em tipo String e ser lido pelo JSON d boa. 
})
.then((resp) => resp.json())
.then((data) => { console.log(data); useNavigate("/pagina",{ state: {message: "Digite mensagem"} })  ||| useNavigate, navega até a pagina a pagina referida                                                                                                            
.catch((error) => console.log(error) ) 


*se tiver um Select, o value dele não pode ficar vazio, colocar como value={projeto.category ? project.category.id     : ""}  condição ternaria para atribuir ou não o valor da prop do objeto * 


useLocation ||| useLocation, serve para ativar alguma função ou uma condição IF, quando ocorrer uma mudança na URL

*import {useLocation} from "react-router-dom";  atribuir a uma var para ser mais pratico. é um método ent const location= useLocation() *

* let message = ""; if(location.state){message = location.state.message;}  ||| nesse exemplo, quando o estado do location fosse ativado por causa da URL a let ia receber a message enviada do fetch*








DELETE  ||| Deletando Dados do Backend JSON (nesse caso, apenas um array de um objeto com varios )

fetch(`http://localhost:numero_porta/nome_conteudoJSON/${nome_prop}`,{  ||| Local do conteudo(objeto) a ser Excluido com base em uma .Propriedade Unica dele (como um ID). * concatenação de `aspas` `${}` *
                                                                                                                                                       *apesar de estarmos indo no nome de uma prop, todo o escopo dela (como o seu array) sera deletado 
method: "DELETE",                                               ||| DELETE, método para Deletar Dados 
headers:{'Content-Type':'application/json',
},
})
.then((r) => r.json())
.then((data) => { console.log("conteudo Json que foi excluido"+data)
setProjects(projects.filter((fil) => fil.nome_prop !== nome_prop  ))    ||| Só o proprio Fetch Delete ja deletaria o conteudo no backend JSON, porem na pag deveria ser feito um Filtro com a atualização dos conteudos
})
.catch((erro) => console.log(erro));




PATCH ||| Alterando dados ja existentes do Backend JSON 

fetch(`http://localhost:numero_porta/nome_conteudoJSON/${nome_prop}`, { *apesar de estarmos indo no nome de uma prop, todo o escopo dela (como o seu array) sera mudado*
method: "PATCH", headers: {"Content-Type":"application/json"},      |||  PATCH, Atualiza conteudo apenas no local especificado no http

body: JSON.stringify(conteudo)          |||   o conteudo enviado para o corpo(body) do arquivo JSON, antes é convertido pelo stringify() para ficar em tipo String e ser lido pelo JSON d boa.
})






Efeito de Loading... 

Basta importar uma imagem que se movimente e importa-la quando funçoes de elementos que demoram a responder forem ativadas, como requisiçoes de banco de dados.

Então, usar variaveis UseState para PARAR  a visualização do icon quando o mesmo for carregado, começando com estas recebendo false por exemplo.

Depois que a requisição do banco terminar Setar o Usestate para True, e quando for exibir esse Loading colocar um ternario {UseStateParar == false && ( <Componente_Loading/>)}
>}



{useParams} from "react-router-dom" ||| Importando Params, serve para um pegar valores dinamicos da URL

const {qlqnome} = useParams();  ||| var destruturada para armazenas valor do Params

* esse {qlqnome} é o msm qlqnome definido la no caminho da tag Router "/:qlqnome". Que é uma url com valor dinamico







 

























 





















